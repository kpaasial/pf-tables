#!/bin/sh 

# Script for updating a set of IP/CIDR tables.

# TODO: do not hardcode paths to utilities. Detect them at run time.
# CAVEATS: This will probably work on FreeBSD and OpenBSD without
# modifications. No guarantees of working on other BSD OSes.
PREFIX=@@PREFIX@@


: ${PFTABLES_CONFIG:="/${PREFIX}/etc/pf-tables.conf"}
: ${PFTABLES_DBDIR:="/var/db/pf-tables"}



CAT=/bin/cat
CP=/bin/cp
FTP=/usr/bin/ftp
MKTEMP=/usr/bin/mktemp
PFCTL=/sbin/pfctl
RM=/bin/rm
SED=/usr/bin/sed
UNAME=/usr/bin/uname

COMMAND=fetch
DOWNLOAD=yes
STORE=yes
LOAD=


# TODO: Test on NetBSD and DragonFlyBSD
OSTYPE=$($UNAME)

case $OSTYPE in 
    FreeBSD)
        ;;
    OpenBSD)
        ;;
    *)
        echo "Unsupported operating system"
        exit 1
        ;;
esac  


if [ $# -eq 1 ]; then 
    COMMAND=$1
fi


case "${COMMAND}" in
    "fetch" ) DOWNLOAD=yes; STORE=yes; LOAD=;;
    "load" ) DOWNLOAD=; STORE=; LOAD=yes;;
    "all" ) DOWNLOAD=yes; STORE=yes; LOAD=yes;;
esac


if [ ! -r "${PFTABLES_CONFIG}" ]; then
    echo "ERROR: config file ${PFTABLES_CONFIG} is not readable."
    exit 1
fi

if [ ! -d "${PFTABLES_DBDIR}" ]; then
    echo "ERROR: database directory ${PFTABLES_DBDIR} does not exist."
    exit 1
fi


finish() {
    # Make sure we are deleting a temporary directory created by this script
    # and not something else. This script will be run as root, better safe than
    # sorry. The trick here is to test if the pattern on the right side of ##
    # "eats" everything in $SCRATCH. Zero length result means a complete match. 
    if test -z "${SCRATCH##/tmp/pftables-??????????}" ; then
         ${RM} -rf "${SCRATCH}"
    else
        echo "Unexpected value for SCRATCH: ${SCRATCH}"
    fi     
}


# Download a tablefile from URL and place its contents in TMPFILE.
download_tablefile() {
    URL=$1
    TMPFILE=$2

    ${FTP} -v -o - "${URL}" > "${TMPFILE}.orig" || return 1
    ${SED} -e 's/[;#].*$//g' -e '/^\s*$/d' "${TMPFILE}.orig" > "${TMPFILE}" \
        || return 1

}



# Load contents of TABLEFILEPATH into PF table TABLE.
load_tablefile() {
    TABLEFILEPATH=$1
    TABLE=$2
    
    if [ ! -r "${TABLEFILEPATH}" ]; then
        echo "ERROR: table file ${TABLEFILEPATH} not readable."
        return 1
    fi
    
    if ! ${PFCTL} -T show -t "${TABLE}" >/dev/null 2>&1 ; then
        echo "ERROR: PF table ${TABLE} not found in the active ruleset".
        return 1
    fi
 
    ${PFCTL} -T flush -t "${TABLE}" || return 1
    ${PFCTL} -T add -t "${TABLE}" -f "${TABLEFILEPATH}" || return 1
}



if [ "${DOWNLOAD}" = "yes" ]; then
    # Create the temporary directory
    TEMPLATE="XXXXXXXXXX"
    SCRATCH=$(${MKTEMP} -d /tmp/pftables-${TEMPLATE})
    trap finish EXIT

    downloaded_tables=0

    while read line
    do  
        line="${line%%#*}"

        if [ -z "${line}" ]; then
            continue
        fi

        set -- $line

        URL=$1
        TABLE=$2


        if [ -z "${URL}" ] || [ -z "${TABLE}" ]; then
            echo "Malformed line ${line} in config file ${PFTABLES_CONFIG}"
            exit 1
        fi

        TMPFILE="${SCRATCH}/${TABLE}.txt"

        if ! download_tablefile "${URL}" "${TMPFILE}" ; then
            echo "ERROR: Something went wrong downloading ${URL}."
            exit 1
        fi 

        downloaded_tables=$(($downloaded_tables + 1 ))
            
    done <"${PFTABLES_CONFIG}"

    # The store pass can not be done unless the download pass has
    # finished successfully.
    
    if [ "${STORE}" = "yes" ] && [ $downloaded_tables -gt 0 ]; then
        # Copy processed tablefiles (*.txt) from ${SCRATCH} to 
        # ${PFTABLES_DBDIR}
        for TMPFILE in ${SCRATCH}/*.txt; do
            ${CP} "${TMPFILE}" "${PFTABLES_DBDIR}"
        done    

    fi
fi

if [ "${LOAD}" = "yes" ]; then

    # The name of the table file without the .txt ending
    # is the name of PF table where the file is to be loaded.
    # We do not need to read the config file the second time.
    for TABLEFILEPATH in ${PFTABLES_DBDIR}/*.txt; do
        TABLEFILEBASE=$(basename $TABLEFILEPATH)
        TABLE="${TABLEFILEBASE%.txt}"

        if ! load_tablefile "${TABLEFILEPATH}" "${TABLE}"; then
            echo "ERROR: Something went wrong loading table ${TABLE} to PF."
            exit 1
        fi 
    done
fi

exit 0
